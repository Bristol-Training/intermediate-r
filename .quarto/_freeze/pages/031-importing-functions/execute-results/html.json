{
  "hash": "97221927922fef575ac653940458e643",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Importing functions\n---\n\n\n\n\n\n\nIt is likely that a lot of the R code in the vignettes you saw \nin the last page did not make sense to you now. Do not worry!\nYou are new to R and are still near the beginning of your\nlearning journey. Over the last half of this workshop we\nwill explore some of the building blocks of R so that \nthey will begin to make a little more sense ;-)\n\nA core building block of all programming languages is a\nfunction. A function is a reusable block of code that\ncan be used over and over again in your program. \nA function takes inputs (called arguments), it then \ndoes something to those inputs to produce some outputs,\nwhich are returned to you.\n\nYou've already used many functions. For example,\n\n```r\nlibrary(stringr)\nhello <- \"Hello R\"\nlength <- str_length(hello)\ncat(sprintf(\"'%s' has %d characters\\n\", hello, length)) \n```\n\nwill print `'Hello R' has 7 characters`.\n\nThis code has four functions:\n\n* `library` : This function loads the library passed as the argument,\ne.g. `library(stringr)` loads the `stringr` library\n* `str_length` : This function calculates the number of characters\nin the string passed in as the argument, returning the number of \ncharacters. When input the value of `hello` (namely `Hello R`) it\nreturns the number `7`.\n* `cat` : This prints its arguments to the screen, returning nothing.\n* `sprintf` : This formats a string based on its many input arguments,\nreturning the string that has been created.\n\n## Writing your own functions\n\nYou can write your own functions in R! For example, let's try to\nwrite a function that calculates the mean average of a list \nof numbers.\n\nAs input, the function will take a list of numbers. It should \noutput a number which is the mean of those numbers.\n\nThere are many ways this function could be written. Here is a \npossible solution;\n\n```r\ncalculate_mean <- function(values){\n     total <- 0.0\n     count <- 0\n     for (value in values){\n         total <- total + value\n         count <- count + 1\n     }\n     return(total / count)\n}\n```\n\nWe can then use this function, to, e.g. calculate the average\nheight of a group of people, by typing;\n\n```r\nperson_heights = c(1.62, 1.80, 1.56, 1.73, 1.91)\n\naverage_height <- calculate_mean(person_heights)\n\ncat(sprintf(\"The average height is %.2f m\\n\", average_height))\n```\n\nRunning this would print;\n\n```\nThe average height is 1.72 m\n```\n\n## Scaffolding\n\nTo explain how this worked, we need to look at how this function\nwas defined. There is some scaffolding that is common to all functions.\nFirst, we define the function name. In R, this is a variable that holds\nthe code of the function. We define this variable and assign data to\nit in the same way as if this was assigning a number to a numeric\nvariable, or a string to a string variable, namely using the\nsyntax `variable <- value`:\n\n```r\n   Variable    assigned  value \n      ↓           ↓      ↓\ncalculate_average <- function(...\n```\n\nNext, we have the keyword `function`, that says that this is some\ndata that is of type function. This means that the data will contain\ncode. The arguments to `function` are the arguments you would like\nto use as input for your new function;\n\n```r\n                     keyword  arguments\n                        ↓        ↓\ncalculate_average <- function(values) {\n```\n\nNext, you need the body of the function. This body is the lines\nof code that will be run when your function is called. Just like\nwith `for` loops or `if` statements, the body of code\nis contained within curly brackets\n\n```r\n                                  Open curly brackets\n                                      ↓\ncalculate_average <- function(values) {\n    # body of the function is the\n    # lines of code within the curly brackets\n}\n↑\nClose curly brackets\n```\n\nThe input(s) for the function is/are the argument(s) that are\npassed to `function`, in this case, `values`. \nOur code will loop through all of the values in `values` to \ncalculate the mean average. Once we have finished, we reach\nthe final part of the function, which is `return`. This is\nused to return the output of the function back to the caller.\n\n```r\n                           Input(s)\n                             ↓\ncalculate_mean <- function(values){\n     total <- 0.0\n     count <- 0\n     for (value in values){\n         total <- total + value\n         count <- count + 1\n     }\n     return(total / count)\n        ↑\n     Return output\n}\n```\n\nFinally, when we call the function, the arguments that pass\nto the function are used as the input. The output is then\nreturned and assigned to the result variable. So, in this case;\n\n```\n                Call function      with input(s)\n                        ↓             ↓  \naverage_height <- calculate_mean(person_heights)\n     ↑         ↑\n  Output     assigned\n```\n\n`calculate_mean` is called with `person_heights`. The data referred\nto by `person_heights` is passed to `calculate_mean` and in this function\nis referred to as `values`. This data is looped over, the mean average\ncalculated, resulting in an output that is returned at the end of\nthe function, and assigned to the variable `average_height`.\n\n> EXERCISE\n>\n> Write a function, called `calculate_max`, that returns the largest value.\n> Use this to find the largest height in the list of heights above.\n>\n> Hint - start by using a variable called `max_value` and setting that\n> equal to `NA`. Then use `if (is.na(max_value) || value > max_value)`\n> to test whether a `value` in `values` is greater. The `||` means \"or\"\n>\n> [Answer](functions_answer01.html)\n\n## Errors\n\nYour function works well, but what would happen if the wrong arguments\nwere passed? What should we do if someone did this?\n\n```r\nresult <- calculate_mean(c(\"cat\", \"dog\", \"horse\"))\n```\n\nIf you run this now, you will see that R prints an error;\n\n```\nError in total + value : non-numeric argument to binary operator\n```\n\nThis isn't very descriptive of helpful. You can control how R will\nbehave in an error condition by using `stop` or `warning`.\n\nYou use `stop` if you want to stop the function from continuing,\nand to print an error message for the user. For example,\nwe could use `is.numeric` to check if all of the values are\nnumeric. If not, then we could `stop`;\n\n```r\ncalculate_mean <- function(values){\n     total <- 0.0\n     count <- 0\n     for (value in values){\n         if (!is.numeric(value)){\n             stop(\"Cannot calculate average of non-numeric values\")\n         }\n         total <- total + value\n         count <- count + 1\n     }\n     return(total / count)\n}\n```\n\n(note that `!` means \"not\")\n\nNow running;\n\n```r\nresult <- calculate_mean(c(\"cat\", \"dog\", \"horse\"))\n```\n\ngives the more useful error message;\n\n```\nError in calculate_mean(c(\"cat\", \"dog\", \"horse\")) : \n  Cannot calculate average of non-numeric values\n```\n\nHowever, what if instead of stopping, we want to calculate\nthe average of any numeric values, and just warn the user \nif non-numeric values are passed? We can do this using\nthe `warning` function, e.g.\n\n```r\ncalculate_mean <- function(values){\n     total <- 0.0\n     count <- 0\n     for (value in values){\n         number <- as.numeric(value)\n\n         if (!is.na(number)){\n             total <- total + number\n             count <- count + 1\n         } else {\n             warning(\"Skipping '\", value, \n                     \"' as it is not numeric\")\n         }\n     }\n     return(total / count)\n}\n```\n\nIn this case, we try to convert the value into a number using\nthe `as.numeric` function. If this fails, it will return `NA`.\nWe then test for `NA` using the `is.na` function, printing\na warning that we are skipping this value if it isn't a number.\n\n> EXERCISE\n>\n> Add error handling to your `calculate_max` function so that\n> it warns when non-numeric values are skipped, and stops\n> when there is no maximum value (i.e. because there are\n> no numeric values passed).\n>\n> [Answer](functions_answer02.html)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}