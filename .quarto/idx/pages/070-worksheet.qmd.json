{"title":"Worksheet","markdown":{"yaml":{"title":"Worksheet"},"containsRefs":false,"markdown":"\n\n\nThis page contains a number of questions and exercises to give you a chance to practise what you have learned this session.\nYou should create a new `.R` R file for each exercise.\n\n::: {#exercise-1 .callout-note title=\"Exercise 1\" icon=false} \nThe first exercise is to practise searching the documentation. From the list of modules in the standard library, find one that contains a function to give the current date and time.\n\nFill in the `...` in the snippet below.\n\n```rScript\nimport ...\n\ntime_now <- ...\n\nprint(time_now.isoformat())\n```\n\nThe output should be something like the following, but with today's date and time:\n\n```\n2048-08-32T10:53:15.062603\n```\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer 1' collapse=\"true\"}\n\n The function we can use is [`datetime.datetime.now()`](https://docs.RScript.org/3/library/datetime.html#datetime.datetime.now). There is an [example in that module as well](https://docs.RScript.org/3/library/datetime.html#examples-of-usage-datetime).\n\n```{.r}\n#| filename: ex1.R\n#| eval: false\n\nimport datetime\n\ntime_now <- datetime.datetime.now()\n\nprint(time_now.isoformat())\n```\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript ex1.R\n```\n\n```{.r}\n#| echo: false\nimport datetime\n\ntime_now <- datetime.datetime.now()\n\nprint(time_now.isoformat())\n```\n\n:::\n\n\n\n::: {#exercise-2 .callout-note title=\"Exercise 2\" icon=false} \nWrite a function which can accept a string as an argument and return the first word in that string. To start you off, here's skeleton of what the function should look like.\n\n```rScript\ndef first_word(l):\n    ...\n    return ...\n```\n\nyou should be able to use it like:\n\n```rScript\nsentence <- \"This is a collection of words\"\nword <- first_word(sentence)\nprint(word)\n```\n\ngiving the output:\n\n```\nThis\n```\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer 2' collapse=\"true\"}\n```{.r}\n#| filename: ex2.R\n\ndef first_word(l):\n    words <- l.split()\n    the_first_word <- words[0]\n    return the_first_word\n\nsentence <- \"This is a collection of words\"\nword <- first_word(sentence)\nprint(word)\n```\n\n:::\n\n\n\n::: {#exercise-3 .callout-note title=\"Exercise 3\" icon=false} \n\nWrite a function called `count_word_match` which accepts three agruments:\n\n1. a string which contains multiple words separated by spaces,\n2. a string which gives the word that you want to count the occurrences of and\n3. a boolean (`True` or `False`) which specifies whether the match should be case-sensitive.\n\n```rScript\ndef count_word_match(words, match, case_sensitive):\n    ...\n    return ...\n```\n\nyou should be able to use it like:\n\n```rScript\ncount1 <- count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 <- count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n```\n\ngiving the output:\n\n```\n1\n2\n``` \n:::\n\n\n::: {#answer3 .callout-caution icon=false title='Answer 3' collapse=\"true\"}\n```{.r}\n#| filename: ex3.R\n\ndef count_word_match(words, match, case_sensitive):\n    if not case_sensitive:\n        # Make both the words and the match a consistent case\n        words <- words.casefold()\n        match <- match.casefold()\n    \n    word_list <- words.split()\n    \n    count <- 0\n    for word in word_list:\n        if word == match:\n            count += 1\n    \n    return count\n\ncount1 <- count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 <- count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n```\n:::\n\n\n\n::: {#exercise-4 .callout-note title=\"Exercise 4\" icon=false} \nFor this exercise, you should write a function which can find references, like `[4]`, in some text.\n\nIf the function is passed a string like:\n\n```rScript\n\"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n```\n\nit should return a list of integers like:\n\n```rScript\n[1, 3, 10, 7]\n```\n\nThe function should be called `find_references`.\n:::\n\n::: {#answer4 .callout-caution icon=false title='Answer 4' collapse=\"true\"}\n This exercise it tricker, but if you make some assumptions about the format of the input, you can make your life easier. For example, you can assume for now that every reference like `[4]` is surrounded by spaces. This allows `str.split()` to pull each one out as a \"word\". You can also assume that every reference is an integer number.\n\n```{.r}\n#| filename: ex4.R\n\ndef find_references(text):\n    words <- text.split()\n    \n    refs <- []\n    # For each word in the text\n    for word in words:\n        # if it's surrounded by square brackets\n        if word[0] == \"[\" and word[-1] == \"]\":\n            # grab the bit between the square brackets\n            reference <- word[1:-1]\n            # convert it to a number\n            reference_number <- int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nexample_text <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences <- find_references(example_text)\n\nprint(references)\n```\n\n:::\n\n\n\n::: {#exercise-5 .callout-note title=\"Exercise 5\" icon=false} \n\nTake the function that you wrote in the last exercise and move it into a module called `refs`. You should then write a test file called `test_refs.R` containing:\n\n```rScript\nimport refs\n\ntext <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers <- refs.find_references(text)\n\nexpected <- [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n```\n\nYou should make sure that the test passes when the test script is run with:\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript test_refs.R\n```\n:::\n\n::: {#answer5 .callout-caution icon=false title='Answer 5' collapse=\"true\"}\n```{.r}\n#| filename: refs.R\n\ndef find_references(text):\n    words <- text.split()\n    \n    refs <- []\n    for word in words:\n        if word[0] == \"[\" and word[-1] == \"]\":\n            reference <- word[1:-1]\n            reference_number <- int(reference)\n            refs.append(reference_number)\n    \n    return refs\n```\n\n```{.r}\n#| filename: test_refs.R\n\nimport refs\n\ntext <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers <- refs.find_references(text)\n\nexpected <- [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n```\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript test_refs.R\n```\n:::\n\n","srcMarkdownNoYaml":"\n\n\nThis page contains a number of questions and exercises to give you a chance to practise what you have learned this session.\nYou should create a new `.R` R file for each exercise.\n\n::: {#exercise-1 .callout-note title=\"Exercise 1\" icon=false} \nThe first exercise is to practise searching the documentation. From the list of modules in the standard library, find one that contains a function to give the current date and time.\n\nFill in the `...` in the snippet below.\n\n```rScript\nimport ...\n\ntime_now <- ...\n\nprint(time_now.isoformat())\n```\n\nThe output should be something like the following, but with today's date and time:\n\n```\n2048-08-32T10:53:15.062603\n```\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer 1' collapse=\"true\"}\n\n The function we can use is [`datetime.datetime.now()`](https://docs.RScript.org/3/library/datetime.html#datetime.datetime.now). There is an [example in that module as well](https://docs.RScript.org/3/library/datetime.html#examples-of-usage-datetime).\n\n```{.r}\n#| filename: ex1.R\n#| eval: false\n\nimport datetime\n\ntime_now <- datetime.datetime.now()\n\nprint(time_now.isoformat())\n```\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript ex1.R\n```\n\n```{.r}\n#| echo: false\nimport datetime\n\ntime_now <- datetime.datetime.now()\n\nprint(time_now.isoformat())\n```\n\n:::\n\n\n\n::: {#exercise-2 .callout-note title=\"Exercise 2\" icon=false} \nWrite a function which can accept a string as an argument and return the first word in that string. To start you off, here's skeleton of what the function should look like.\n\n```rScript\ndef first_word(l):\n    ...\n    return ...\n```\n\nyou should be able to use it like:\n\n```rScript\nsentence <- \"This is a collection of words\"\nword <- first_word(sentence)\nprint(word)\n```\n\ngiving the output:\n\n```\nThis\n```\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer 2' collapse=\"true\"}\n```{.r}\n#| filename: ex2.R\n\ndef first_word(l):\n    words <- l.split()\n    the_first_word <- words[0]\n    return the_first_word\n\nsentence <- \"This is a collection of words\"\nword <- first_word(sentence)\nprint(word)\n```\n\n:::\n\n\n\n::: {#exercise-3 .callout-note title=\"Exercise 3\" icon=false} \n\nWrite a function called `count_word_match` which accepts three agruments:\n\n1. a string which contains multiple words separated by spaces,\n2. a string which gives the word that you want to count the occurrences of and\n3. a boolean (`True` or `False`) which specifies whether the match should be case-sensitive.\n\n```rScript\ndef count_word_match(words, match, case_sensitive):\n    ...\n    return ...\n```\n\nyou should be able to use it like:\n\n```rScript\ncount1 <- count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 <- count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n```\n\ngiving the output:\n\n```\n1\n2\n``` \n:::\n\n\n::: {#answer3 .callout-caution icon=false title='Answer 3' collapse=\"true\"}\n```{.r}\n#| filename: ex3.R\n\ndef count_word_match(words, match, case_sensitive):\n    if not case_sensitive:\n        # Make both the words and the match a consistent case\n        words <- words.casefold()\n        match <- match.casefold()\n    \n    word_list <- words.split()\n    \n    count <- 0\n    for word in word_list:\n        if word == match:\n            count += 1\n    \n    return count\n\ncount1 <- count_word_match(\"To be or not to be\", \"to\", True)\nprint(count1)\n\ncount2 <- count_word_match(\"To be or not to be\", \"to\", False)\nprint(count2)\n```\n:::\n\n\n\n::: {#exercise-4 .callout-note title=\"Exercise 4\" icon=false} \nFor this exercise, you should write a function which can find references, like `[4]`, in some text.\n\nIf the function is passed a string like:\n\n```rScript\n\"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n```\n\nit should return a list of integers like:\n\n```rScript\n[1, 3, 10, 7]\n```\n\nThe function should be called `find_references`.\n:::\n\n::: {#answer4 .callout-caution icon=false title='Answer 4' collapse=\"true\"}\n This exercise it tricker, but if you make some assumptions about the format of the input, you can make your life easier. For example, you can assume for now that every reference like `[4]` is surrounded by spaces. This allows `str.split()` to pull each one out as a \"word\". You can also assume that every reference is an integer number.\n\n```{.r}\n#| filename: ex4.R\n\ndef find_references(text):\n    words <- text.split()\n    \n    refs <- []\n    # For each word in the text\n    for word in words:\n        # if it's surrounded by square brackets\n        if word[0] == \"[\" and word[-1] == \"]\":\n            # grab the bit between the square brackets\n            reference <- word[1:-1]\n            # convert it to a number\n            reference_number <- int(reference)\n            refs.append(reference_number)\n    \n    return refs\n\nexample_text <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nreferences <- find_references(example_text)\n\nprint(references)\n```\n\n:::\n\n\n\n::: {#exercise-5 .callout-note title=\"Exercise 5\" icon=false} \n\nTake the function that you wrote in the last exercise and move it into a module called `refs`. You should then write a test file called `test_refs.R` containing:\n\n```rScript\nimport refs\n\ntext <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers <- refs.find_references(text)\n\nexpected <- [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n```\n\nYou should make sure that the test passes when the test script is run with:\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript test_refs.R\n```\n:::\n\n::: {#answer5 .callout-caution icon=false title='Answer 5' collapse=\"true\"}\n```{.r}\n#| filename: refs.R\n\ndef find_references(text):\n    words <- text.split()\n    \n    refs <- []\n    for word in words:\n        if word[0] == \"[\" and word[-1] == \"]\":\n            reference <- word[1:-1]\n            reference_number <- int(reference)\n            refs.append(reference_number)\n    \n    return refs\n```\n\n```{.r}\n#| filename: test_refs.R\n\nimport refs\n\ntext <- \"I recommend this book [1] but the other book [3] is better. Some people think that this website [10] is the best but I prefer this [7] one.\"\n\nnumbers <- refs.find_references(text)\n\nexpected <- [1, 3, 10, 7]\nif numbers == expected:\n    print(\"Test passed\")\nelse:\n    print(\"Test failed:\", numbers, \"is not the same as\", expected)\n```\n\n```{.bash filename=\"Terminal/Command Prompt\"}\nRScript test_refs.R\n```\n:::\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"070-worksheet.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"],"title":"Worksheet"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}