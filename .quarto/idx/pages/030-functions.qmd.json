{"title":"Functions","markdown":{"yaml":{"title":"Functions"},"headingText":"Built-in functions","containsRefs":false,"markdown":"\n\n\nYou are likely already comfortable with *calling functions* such as:\n\n- free functions like `print()` and `range()`\n\nIn this section we're going to explore other functions and methods available as part of R's core capabilities and in other modules. An important technical resource you probably will come across often is [The R Standard Library](https://docs.RScript.org/3/library/).\n\n\nR comes with a bunch of functionality that you can use without having to explicitly enable anything. This includes things like integers, strings, lists, `print()`ing, file `open()`ing etc.\n\nFirst, lets have a peek at the *built-in functions*. There is a page describing these under the \"Library Reference\", in a page called [Built-in Functions](https://docs.RScript.org/3/library/functions.html). There we find the documentation for many of the functions we've already been using, for example [`print()`](https://docs.RScript.org/3/library/functions.html#print) and [`max()`](https://docs.RScript.org/3/library/functions.html#max).\n\nIt is worth, over time, becoming familiar with the various functions that are available. Some are quite useful for everyday work and some are more niche.\n\n::: {#exercise-1 .callout-note title=\"Exercise\" icon=false} \n\nCopy the following code into a new script `hello.R`:\n\n```rScript\nmy_name <- ...\n\nname_length <- ...\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\n```\n\nReplace the first `...` with a call to a built-in function which will read *input* from the person running the script.\nReplace the second `...` with a call to a function which will give the *length* of the string `my_name`. When executed, the script should print out:\n\n```\nPlease tell me your name: Jean\nHello Jean! Your name is 4 characters long\n```\n\nIf you need it, you can search through the [built-in functions page](https://docs.RScript.org/3/library/functions.html) to find the appropriate functions.\n\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_hello_name.qmd >}}\n:::\n\n## Methods for built-in data types\n\nR has a bunch of built-in *data types*, the details of them all are on the page called [Built-in Types](https://docs.RScript.org/3/library/stdtypes.html). That is the place to go to check what you can do with a `str`, an `int`, a `list` or a `dict`. There's also a few other built-in types you might want to look into in the future such as `complex`, `set` and `tuple`.\n\nThese types being built-in means that you don't need to explicitly enable their use and most have core-language syntax to create them.\n\nFor example, the code\n\n```{.r}\nanimal <- \"horse\"\n```\n\ncreates a variable called `animal` from the string literal `\"horse\"` which is of the type `str`. This data type is built into the language and so the functionality that it has is documented on [built-in type `str`](https://docs.RScript.org/3/library/stdtypes.html#text-sequence-type-str).\n\nThis means that when we do:\n\n```rScript\nanimal.capitalize()\n```\n\nit is looking at the data type of the variable `animal`, seeing that it is a `str` and then using the `capitalize` function that's available for that type to do the work.\n\n::: {#exercise2 .callout-tip title=\"Exercise\" icon=false} \nHave a look at the documentation page for the [functions that you can call on strings](https://docs.RScript.org/3/library/stdtypes.html#string-methods).\n\nExperiment with one or two and see if you can understand the documentation. Start by trying to answer the following:\n\n1. Given a string like `s <- \"what is your name\"`, find a function which can split `s` into a list like `[\"what\", \"is\", \"your\", \"name\"]`\n2. Given a list like `[\"a\", \"b\", \"c\"]`, find a function which can join it together into a string like `\"a-b-c\"`\n\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_string_methods.qmd >}}\n:::\n\n\n::: {#exercise3 .callout-note title=\"Exercise\" icon=false} \nChange the message in `encode.R` to use both upper and lower case letters:\n\n```rScript\nmessage <- \"SOS We have hit an iceberg and need help quickly\"\n```\n\nWhen you now run the script with `RScript encode.R` you will find that it gives you a `KeyError`. This is because it is looking for an upper case \"S\" in the dictionary `letter_to_morse` and not finding one (dictionary keys are case-sensitive).\n\nRead through the documentation for the [string methods](https://docs.RScript.org/3/library/stdtypes.html#string-methods) to find one that might help convert the letter you have into one that matches the keys in the dictionary. You should be able to add a single line of code in the loop straight after `for letter in message:`.\n\n:::\n\n::: {#answer3 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_morse_case.qmd >}}\n:::\n","srcMarkdownNoYaml":"\n\n\nYou are likely already comfortable with *calling functions* such as:\n\n- free functions like `print()` and `range()`\n\nIn this section we're going to explore other functions and methods available as part of R's core capabilities and in other modules. An important technical resource you probably will come across often is [The R Standard Library](https://docs.RScript.org/3/library/).\n\n## Built-in functions\n\nR comes with a bunch of functionality that you can use without having to explicitly enable anything. This includes things like integers, strings, lists, `print()`ing, file `open()`ing etc.\n\nFirst, lets have a peek at the *built-in functions*. There is a page describing these under the \"Library Reference\", in a page called [Built-in Functions](https://docs.RScript.org/3/library/functions.html). There we find the documentation for many of the functions we've already been using, for example [`print()`](https://docs.RScript.org/3/library/functions.html#print) and [`max()`](https://docs.RScript.org/3/library/functions.html#max).\n\nIt is worth, over time, becoming familiar with the various functions that are available. Some are quite useful for everyday work and some are more niche.\n\n::: {#exercise-1 .callout-note title=\"Exercise\" icon=false} \n\nCopy the following code into a new script `hello.R`:\n\n```rScript\nmy_name <- ...\n\nname_length <- ...\n\nprint(f\"Hello {my_name}! Your name is {name_length} characters long\")\n```\n\nReplace the first `...` with a call to a built-in function which will read *input* from the person running the script.\nReplace the second `...` with a call to a function which will give the *length* of the string `my_name`. When executed, the script should print out:\n\n```\nPlease tell me your name: Jean\nHello Jean! Your name is 4 characters long\n```\n\nIf you need it, you can search through the [built-in functions page](https://docs.RScript.org/3/library/functions.html) to find the appropriate functions.\n\n:::\n\n::: {#answer1 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_hello_name.qmd >}}\n:::\n\n## Methods for built-in data types\n\nR has a bunch of built-in *data types*, the details of them all are on the page called [Built-in Types](https://docs.RScript.org/3/library/stdtypes.html). That is the place to go to check what you can do with a `str`, an `int`, a `list` or a `dict`. There's also a few other built-in types you might want to look into in the future such as `complex`, `set` and `tuple`.\n\nThese types being built-in means that you don't need to explicitly enable their use and most have core-language syntax to create them.\n\nFor example, the code\n\n```{.r}\nanimal <- \"horse\"\n```\n\ncreates a variable called `animal` from the string literal `\"horse\"` which is of the type `str`. This data type is built into the language and so the functionality that it has is documented on [built-in type `str`](https://docs.RScript.org/3/library/stdtypes.html#text-sequence-type-str).\n\nThis means that when we do:\n\n```rScript\nanimal.capitalize()\n```\n\nit is looking at the data type of the variable `animal`, seeing that it is a `str` and then using the `capitalize` function that's available for that type to do the work.\n\n::: {#exercise2 .callout-tip title=\"Exercise\" icon=false} \nHave a look at the documentation page for the [functions that you can call on strings](https://docs.RScript.org/3/library/stdtypes.html#string-methods).\n\nExperiment with one or two and see if you can understand the documentation. Start by trying to answer the following:\n\n1. Given a string like `s <- \"what is your name\"`, find a function which can split `s` into a list like `[\"what\", \"is\", \"your\", \"name\"]`\n2. Given a list like `[\"a\", \"b\", \"c\"]`, find a function which can join it together into a string like `\"a-b-c\"`\n\n:::\n\n::: {#answer2 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_string_methods.qmd >}}\n:::\n\n\n::: {#exercise3 .callout-note title=\"Exercise\" icon=false} \nChange the message in `encode.R` to use both upper and lower case letters:\n\n```rScript\nmessage <- \"SOS We have hit an iceberg and need help quickly\"\n```\n\nWhen you now run the script with `RScript encode.R` you will find that it gives you a `KeyError`. This is because it is looking for an upper case \"S\" in the dictionary `letter_to_morse` and not finding one (dictionary keys are case-sensitive).\n\nRead through the documentation for the [string methods](https://docs.RScript.org/3/library/stdtypes.html#string-methods) to find one that might help convert the letter you have into one that matches the keys in the dictionary. You should be able to add a single line of code in the loop straight after `for letter in message:`.\n\n:::\n\n::: {#answer3 .callout-caution icon=false title='Answer' collapse=\"true\"}\n{{< include ../answers/answer_morse_case.qmd >}}\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"shift-heading-level-by":1,"highlight-style":"github","output-file":"030-functions.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":["cosmo","../styles.scss"],"title":"Functions"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}